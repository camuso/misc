diff --git a/drivers/acpi/acpica/tbxface.c b/drivers/acpi/acpica/tbxface.c
index ad11162..5b987a8 100644
--- a/drivers/acpi/acpica/tbxface.c
+++ b/drivers/acpi/acpica/tbxface.c
@@ -46,6 +46,8 @@
 #include "accommon.h"
 #include "actables.h"
 
+#include <linux/prdbg.h>
+
 #define _COMPONENT          ACPI_TABLES
 ACPI_MODULE_NAME("tbxface")
 
@@ -320,6 +322,9 @@ acpi_get_table_with_size(char *signature,
        u32 j;
 	acpi_status status;
 
+	bool ipmisig = !!strcmp(signature, ACPI_SIG_SPMI);
+	if (ipmisig) prentry();
+
 	/* Parameter validation */
 
 	if (!signature || !out_table) {
@@ -351,9 +356,12 @@ acpi_get_table_with_size(char *signature,
 			acpi_gbl_root_table_list.tables[i].pointer = NULL;
 		}
 
+		if (ipmisig)
+			prdbg("found table, return acpi_status: %d\n", status);
 		return (status);
 	}
 
+	if (ipmisig) prdbg("return AE_NOT_FOUND\n");
 	return (AE_NOT_FOUND);
 }
 ACPI_EXPORT_SYMBOL(acpi_get_table_with_size)
@@ -364,6 +372,9 @@ acpi_get_table(char *signature,
 {
 	acpi_size tbl_size;
 
+	if (!strcmp(signature, ACPI_SIG_SPMI))
+		prentry();
+
 	return acpi_get_table_with_size(signature,
 		       instance, out_table, &tbl_size);
 }
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 55ce031..10906a5 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -18,6 +18,9 @@
 
 #include "internal.h"
 
+#include <linux/prdbg.h>
+#include <linux/ipmidbg.h>
+
 #define _COMPONENT		ACPI_BUS_COMPONENT
 ACPI_MODULE_NAME("scan");
 extern struct acpi_device *acpi_root;
@@ -118,6 +121,8 @@ bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 {
 	bool ret = false;
 
+	dbgentry();
+
 	mutex_lock(&adev->physical_node_lock);
 	if (!list_empty(&adev->physical_node_list)) {
 		const struct acpi_device_physical_node *node;
@@ -128,6 +133,14 @@ bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 	}
 	mutex_unlock(&adev->physical_node_lock);
 
+	if (dbgmbx.ipmi) {
+		if (ret == false)
+			prdbg("No match found for dev->driver->name: %s\n",\
+					dev->driver->name);
+		else
+			prdbg("Found match for dev->driver->name: %s\n", dev->driver->name);
+	}
+
 	return ret;
 }
 
@@ -155,13 +168,24 @@ bool acpi_device_is_first_physical_node(struct acpi_device *adev,
 struct acpi_device *acpi_companion_match(const struct device *dev)
 {
 	struct acpi_device *adev;
+	bool dbgout = dev ? true : false;
+
+	dbgentry();
+
+	if (dbgout)
+		dbgmsg("match dev_name: %s\n", dev_name(dev));
 
 	adev = ACPI_COMPANION((struct device *)dev);
-	if (!adev)
+	if (!adev) {
+		if (dbgout)
+			dbgmsg("dev_name: %s NOT an ACPI device node!\n", dev_name(dev));
 		return NULL;
+	}
 
-	if (list_empty(&adev->pnp.ids))
+	if (list_empty(&adev->pnp.ids)) {
+		dbgmsg("list empty of pnp ids\n");
 		return NULL;
+	}
 
 	return acpi_device_is_first_physical_node(adev, dev) ? adev : NULL;
 }
@@ -500,18 +524,28 @@ static const struct acpi_device_id *__acpi_match_device(
 	const struct acpi_device_id *id;
 	struct acpi_hardware_id *hwid;
 
+	dbgentry();
+	dbgmsg("iterate over the acpi_device_id and acpi_device->pnp.ids lists\n");
+
 	/*
 	 * If the device is not present, it is unnecessary to load device
 	 * driver for it.
 	 */
-	if (!device || !device->status.present)
+	if (!device || !device->status.present) {
+		dbgmsg("No device present\n");
 		return NULL;
+	}
 
 	for (id = ids; id->id[0]; id++)
-		list_for_each_entry(hwid, &device->pnp.ids, list)
-			if (!strcmp((char *) id->id, hwid->id))
+		list_for_each_entry(hwid, &device->pnp.ids, list) {
+			dbgmsg("id: %s,  hwid: %s\n", id->id, hwid->id);
+			if (!strcmp((char *) id->id, hwid->id)) {
+				dbgmsg("returning with id->id: %s\n", id->id);
 				return id;
+			}
+		}
 
+	dbgmsg("No ID found in list\n");
 	return NULL;
 }
 
@@ -529,6 +563,7 @@ static const struct acpi_device_id *__acpi_match_device(
 const struct acpi_device_id *acpi_match_device(const struct acpi_device_id *ids,
 					       const struct device *dev)
 {
+	dbgentry();
 	return __acpi_match_device(acpi_companion_match(dev), ids);
 }
 EXPORT_SYMBOL_GPL(acpi_match_device);
@@ -536,6 +571,7 @@ EXPORT_SYMBOL_GPL(acpi_match_device);
 int acpi_match_device_ids(struct acpi_device *device,
 			  const struct acpi_device_id *ids)
 {
+	dbgentry();
 	return __acpi_match_device(device, ids) ? 0 : -ENOENT;
 }
 EXPORT_SYMBOL(acpi_match_device_ids);
@@ -578,8 +614,13 @@ static bool acpi_of_driver_match_device(struct device *dev,
 bool acpi_driver_match_device(struct device *dev,
 			      const struct device_driver *drv)
 {
-	if (!drv->acpi_match_table)
+	isipmi(drv);
+	dbgentry();
+
+	if (!drv->acpi_match_table) {
+		dbgmsg("No acpi_match_table\n");
 		return acpi_of_driver_match_device(dev, drv);
+	}
 
 	return !!acpi_match_device(drv->acpi_match_table, dev);
 }
diff --git a/drivers/base/bus.c b/drivers/base/bus.c
index 8dbc799..05b7661 100644
--- a/drivers/base/bus.c
+++ b/drivers/base/bus.c
@@ -20,6 +20,9 @@
 #include "base.h"
 #include "power/power.h"
 
+#include <linux/prdbg.h>
+#include <linux/ipmidbg.h>
+
 /* /sys/devices/system */
 static struct kset *system_kset;
 
@@ -291,14 +294,25 @@ int bus_for_each_dev(struct bus_type *bus, struct device *start,
 	struct klist_iter i;
 	struct device *dev;
 	int error = 0;
-
-	if (!bus || !bus->p)
+	struct device_driver *drv = start ? start->driver : NULL;
+	
+	isipmi(drv);
+	dbgentry();
+	dbgmsg("start->init_name: %s, drv->name: %s\n", \
+		start->init_name, drv ? drv->name : "drv is NULL");
+
+	if (!bus || !bus->p) {
+		dbgmsg("not a valid bus, return -EINVAL!\n");
 		return -EINVAL;
+	}
 
 	klist_iter_init_node(&bus->p->klist_devices, &i,
 			     (start ? &start->p->knode_bus : NULL));
-	while ((dev = next_device(&i)) && !error)
+	while ((dev = next_device(&i)) && !error) {
+	dbgmsg("dev->init_name: %s, dev->driver->name: %s\n", \
+		dev->init_name, dev->driver ? dev->driver->name : "dev->driver is NULL");
 		error = fn(dev, data);
+	}
 	klist_iter_exit(&i);
 	return error;
 }
@@ -688,14 +702,19 @@ int bus_add_driver(struct device_driver *drv)
 	struct driver_private *priv;
 	int error = 0;
 
+	isipmi(drv);
+	dbgentry();
+
 	bus = bus_get(drv->bus);
 	if (!bus)
 		return -EINVAL;
 
 	pr_debug("bus: '%s': add driver %s\n", bus->name, drv->name);
+	dbgmsg("bus: '%s': add driver %s\n", bus->name, drv->name);
 
 	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
 	if (!priv) {
+		dbgmsg("kzalloc(sizeof(*priv)) failed\n");
 		error = -ENOMEM;
 		goto out_put_bus;
 	}
@@ -705,14 +724,19 @@ int bus_add_driver(struct device_driver *drv)
 	priv->kobj.kset = bus->p->drivers_kset;
 	error = kobject_init_and_add(&priv->kobj, &driver_ktype, NULL,
 				     "%s", drv->name);
-	if (error)
+	if (error) {
+		dbgmsg("kobject_init_and_add() failed\n");
 		goto out_unregister;
+	}
 
 	klist_add_tail(&priv->knode_bus, &bus->p->klist_drivers);
 	if (drv->bus->p->drivers_autoprobe) {
+		dbgmsg("drivers_autoprobe set: calling driver_attach()\n");
 		error = driver_attach(drv);
-		if (error)
+		if (error) {
+			dbgmsg("driver_attach() returned %d FAIL\n", error);
 			goto out_unregister;
+		}
 	}
 	module_add_driver(drv->owner, drv);
 
@@ -741,6 +765,8 @@ int bus_add_driver(struct device_driver *drv)
 		}
 	}
 
+	dbgmsg("return 0\n");
+
 	return 0;
 
 out_unregister:
diff --git a/drivers/base/dd.c b/drivers/base/dd.c
index e0fff39..316a7df 100644
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@ -29,6 +29,9 @@
 #include "base.h"
 #include "power/power.h"
 
+#include <linux/prdbg.h>
+#include <linux/ipmidbg.h>
+
 /*
  * Deferred Probe infrastructure.
  *
@@ -110,12 +113,16 @@ static DECLARE_WORK(deferred_probe_work, deferred_probe_work_func);
 
 static void driver_deferred_probe_add(struct device *dev)
 {
+	dbgentry();
+
 	mutex_lock(&deferred_probe_mutex);
 	if (list_empty(&dev->p->deferred_probe)) {
 		dev_dbg(dev, "Added to deferred list\n");
+		dbgmsg("added device %s to deferred list\n", dev_name(dev));
 		list_add_tail(&dev->p->deferred_probe, &deferred_probe_pending_list);
 	}
 	mutex_unlock(&deferred_probe_mutex);
+	dbgmsg("return void\n");
 }
 
 void driver_deferred_probe_del(struct device *dev)
@@ -195,6 +202,8 @@ bool device_is_bound(struct device *dev)
 
 static void driver_bound(struct device *dev)
 {
+	dbgentry();
+
 	if (device_is_bound(dev)) {
 		printk(KERN_WARNING "%s: device %s already bound\n",
 			__func__, kobject_name(&dev->kobj));
@@ -203,6 +212,8 @@ static void driver_bound(struct device *dev)
 
 	pr_debug("driver: '%s': %s: bound to device '%s'\n", dev_name(dev),
 		 __func__, dev->driver->name);
+	dbgmsg("driver: %s bound to device %s\n", \
+		dev->driver->name, dev_name(dev));
 
 	klist_add_tail(&dev->p->knode_driver, &dev->driver->p->klist_devices);
 
@@ -216,6 +227,7 @@ static void driver_bound(struct device *dev)
 	if (dev->bus)
 		blocking_notifier_call_chain(&dev->bus->p->bus_notifier,
 					     BUS_NOTIFY_BOUND_DRIVER, dev);
+	dbgmsg("return void\n");
 }
 
 static int driver_sysfs_add(struct device *dev)
@@ -280,17 +292,24 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 {
 	int ret = 0;
 
+	dbgentry();
+
 	atomic_inc(&probe_count);
 	pr_debug("bus: '%s': %s: probing driver %s with device %s\n",
 		 drv->bus->name, __func__, drv->name, dev_name(dev));
+	dbgmsg("bus: '%s': matched device %s with driver %s\n",\
+		drv->bus->name, dev_name(dev), drv->name);
+
 	WARN_ON(!list_empty(&dev->devres_head));
 
 	dev->driver = drv;
 
 	/* If using pinctrl, bind pins now before probing */
 	ret = pinctrl_bind_pins(dev);
-	if (ret)
+	if (ret) {
+		dbgmsg("pinctrl_bind_pins returned %d\n", ret);
 		goto probe_failed;
+	}
 
 	if (driver_sysfs_add(dev)) {
 		printk(KERN_ERR "%s: driver_sysfs_add(%s) failed\n",
@@ -299,19 +318,29 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 	}
 
 	if (dev->bus->probe) {
+		dbgmsg("calling %pF\n", dev->bus->probe);
 		ret = dev->bus->probe(dev);
-		if (ret)
+		if (ret) {
+			dbgmsg("%pF returned: %d\n", dev->bus->probe, ret);
 			goto probe_failed;
+		}
 	} else if (drv->probe) {
+		dbgmsg("calling %pF\n", drv->probe);
 		ret = drv->probe(dev);
-		if (ret)
+		if (ret) {
+			dbgmsg("%pF returned %d\n", dev->bus->probe, ret); 
 			goto probe_failed;
+		}
 	}
 
 	driver_bound(dev);
 	ret = 1;
 	pr_debug("bus: '%s': %s: bound device %s to driver %s\n",
 		 drv->bus->name, __func__, dev_name(dev), drv->name);
+
+	dbgmsg("bus: '%s': bound device %s to driver %s : return 0\n",\
+		drv->bus->name, dev_name(dev), drv->name);
+
 	goto done;
 
 probe_failed:
@@ -323,6 +352,7 @@ probe_failed:
 	if (ret == -EPROBE_DEFER) {
 		/* Driver requested deferred probing */
 		dev_info(dev, "Driver %s requests probe deferral\n", drv->name);
+		dbgmsg("driver: %s requests probe deferral\n", drv->name);
 		driver_deferred_probe_add(dev);
 	} else if (ret != -ENODEV && ret != -ENXIO) {
 		/* driver matched but the probe failed */
@@ -332,6 +362,8 @@ probe_failed:
 	} else {
 		pr_debug("%s: probe of %s rejects match %d\n",
 		       drv->name, dev_name(dev), ret);
+		dbgmsg("%s: probe of %s rejects match, returns: %d\n", \
+			drv->name, dev_name(dev), ret);
 	}
 	/*
 	 * Ignore errors returned by ->probe so that the next driver can try
@@ -341,6 +373,7 @@ probe_failed:
 done:
 	atomic_dec(&probe_count);
 	wake_up(&probe_waitqueue);
+	dbgmsg("return 0\n");
 	return ret;
 }
 
@@ -388,12 +421,19 @@ int driver_probe_device(struct device_driver *drv, struct device *dev)
 {
 	int ret = 0;
 
-	if (!device_is_registered(dev))
+	dbgentry();
+
+	if (!device_is_registered(dev)) {
+		dbgmsg("device is NOT registered\n");
 		return -ENODEV;
+	}
 
 	pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
 		 drv->bus->name, __func__, dev_name(dev), drv->name);
 
+	dbgmsg("bus: '%s' : matched device %s with driver %s\n",\
+		drv->bus->name, dev_name(dev), drv->name);
+
 	if (dev->parent)
 		pm_runtime_get_sync(dev->parent);
 
@@ -404,6 +444,7 @@ int driver_probe_device(struct device_driver *drv, struct device *dev)
 	if (dev->parent)
 		pm_runtime_put(dev->parent);
 
+	dbgmsg("successful exit\n");
 	return ret;
 }
 
@@ -411,6 +452,8 @@ static int __device_attach(struct device_driver *drv, void *data)
 {
 	struct device *dev = data;
 
+	dbgentry();
+
 	if (!driver_match_device(drv, dev))
 		return 0;
 
@@ -435,6 +478,9 @@ int device_attach(struct device *dev)
 {
 	int ret = 0;
 
+	isipmi(dev->driver);
+	dbgentry();
+
 	device_lock(dev);
 	if (dev->driver) {
 		if (device_is_bound(dev)) {
@@ -449,6 +495,7 @@ int device_attach(struct device *dev)
 			ret = 0;
 		}
 	} else {
+
 		ret = bus_for_each_drv(dev->bus, NULL, dev, __device_attach);
 		pm_request_idle(dev);
 	}
@@ -461,6 +508,17 @@ EXPORT_SYMBOL_GPL(device_attach);
 static int __driver_attach(struct device *dev, void *data)
 {
 	struct device_driver *drv = data;
+	bool dbgout = false;
+	bool hasmatch = false;
+
+	if (drv && drv->bus && drv->bus->name)
+		dbgout = !!strcmp(drv->bus->name, "pci") && drv && dbgmbx.ipmi;
+
+	if (dbgout) {
+		prentry();
+		prdbg("bus: %s, driver: %s, device: %s\n", \
+			drv->bus->name, drv->name, dev_name(dev));
+	}
 
 	/*
 	 * Lock device and try to bind to it. We drop the error
@@ -472,18 +530,35 @@ static int __driver_attach(struct device *dev, void *data)
 	 * is an error.
 	 */
 
-	if (!driver_match_device(drv, dev))
+	if (dbgout) {
+		if (drv->bus->match) {
+			hasmatch = true;
+			prdbg("calling match function: %pF\n", drv->bus->match);
+		} else {
+			hasmatch = false;
+			prdbg("driver: %s, bus: %s has no match function\n", \
+				drv->name, drv->bus->name);
+		}
+	}
+
+	if (!driver_match_device(drv, dev)) {
+		if (dbgout && hasmatch)
+			prdbg("driver_match_device failed\n");
 		return 0;
+	}
 
 	if (dev->parent)	/* Needed for USB */
 		device_lock(dev->parent);
 	device_lock(dev);
+
 	if (!dev->driver)
 		driver_probe_device(drv, dev);
+
 	device_unlock(dev);
 	if (dev->parent)
 		device_unlock(dev->parent);
 
+	if (dbgout) prdbg("return 0\n");
 	return 0;
 }
 
@@ -498,6 +573,9 @@ static int __driver_attach(struct device *dev, void *data)
  */
 int driver_attach(struct device_driver *drv)
 {
+	isipmi(drv);
+	dbgentry();
+
 	return bus_for_each_dev(drv->bus, NULL, drv, __driver_attach);
 }
 EXPORT_SYMBOL_GPL(driver_attach);
diff --git a/drivers/base/driver.c b/drivers/base/driver.c
index c7efccb..8c3ca02 100644
--- a/drivers/base/driver.c
+++ b/drivers/base/driver.c
@@ -17,6 +17,9 @@
 #include <linux/string.h>
 #include "base.h"
 
+#include <linux/prdbg.h>
+#include <linux/ipmidbg.h>
+
 static struct device *next_device(struct klist_iter *i)
 {
 	struct klist_node *n = klist_next(i);
@@ -148,8 +151,14 @@ int driver_register(struct device_driver *drv)
 	int ret;
 	struct device_driver *other;
 
+	isipmi(drv);
+	dbgentry();
+
 	BUG_ON(!drv->bus->p);
 
+	dbgmsg("pdrv->driver.name: \"%s\", ipmi=%d\n", \
+		(dbgmbx.pdrv)->driver.name, (int)dbgmbx.ipmi);
+
 	if ((drv->bus->probe && drv->probe) ||
 	    (drv->bus->remove && drv->remove) ||
 	    (drv->bus->shutdown && drv->shutdown))
@@ -164,15 +173,19 @@ int driver_register(struct device_driver *drv)
 	}
 
 	ret = bus_add_driver(drv);
-	if (ret)
+	if (ret) {
+		dbgmsg("bus_add_driver returned nonzero status\n");
 		return ret;
+	}
 	ret = driver_add_groups(drv, drv->groups);
 	if (ret) {
+		dbgmsg("driver_add_groups returned nonzero status\n");
 		bus_remove_driver(drv);
 		return ret;
 	}
 	kobject_uevent(&drv->p->kobj, KOBJ_ADD);
 
+	dbgmsg("successful exit\n");
 	return ret;
 }
 EXPORT_SYMBOL_GPL(driver_register);
diff --git a/drivers/base/module.c b/drivers/base/module.c
index db930d3..dd1ef9d 100644
--- a/drivers/base/module.c
+++ b/drivers/base/module.c
@@ -11,14 +11,21 @@
 #include <linux/string.h>
 #include "base.h"
 
+#include <linux/prdbg.h>
+#include <linux/ipmidbg.h>
+
 static char *make_driver_name(struct device_driver *drv)
 {
 	char *driver_name;
 
+	dbgentry();
+
 	driver_name = kasprintf(GFP_KERNEL, "%s:%s", drv->bus->name, drv->name);
 	if (!driver_name)
 		return NULL;
 
+	dbgmsg("driver_name: %s\n", driver_name);
+
 	return driver_name;
 }
 
@@ -36,14 +43,26 @@ void module_add_driver(struct module *mod, struct device_driver *drv)
 	int no_warn;
 	struct module_kobject *mk = NULL;
 
+	isipmi(drv);
+	dbgentry();
+
 	if (!drv)
 		return;
 
-	if (mod)
+	if (mod) {
+		if (dbgmbx.ipmi) {
+			prdbg("mod: ");
+			if (mod->name)
+				prdbg("%s\n", mod->name);
+			else
+				prdbg("no mod->name\n");
+		}
 		mk = &mod->mkobj;
-	else if (drv->mod_name) {
+	} else if (drv->mod_name) {
 		struct kobject *mkobj;
 
+		dbgmsg("drv->mod_name: %s\n", drv->mod_name);
+
 		/* Lookup built-in module entry in /sys/modules */
 		mkobj = kset_find_obj(module_kset, drv->mod_name);
 		if (mkobj) {
@@ -52,11 +71,15 @@ void module_add_driver(struct module *mod, struct device_driver *drv)
 			drv->p->mkobj = mk;
 			/* kset_find_obj took a reference */
 			kobject_put(mkobj);
+		} else {
+			dbgmsg("mkobj is NULL\n");
 		}
 	}
 
-	if (!mk)
+	if (!mk) {
+		dbgmsg("mk is NULL: premature exit\n");
 		return;
+	}
 
 	/* Don't check return codes; these calls are idempotent */
 	no_warn = sysfs_create_link(&drv->p->kobj, &mk->kobj, "module");
@@ -67,6 +90,8 @@ void module_add_driver(struct module *mod, struct device_driver *drv)
 					    driver_name);
 		kfree(driver_name);
 	}
+
+	dbgmsg("successful exit\n");
 }
 
 void module_remove_driver(struct device_driver *drv)
diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index e31c971..05ebb47 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -27,12 +27,12 @@
 #include "base.h"
 #include "power/power.h"
 
+#include <linux/prdbg.h>
+#include <linux/ipmidbg.h>
+
 /* For automatically allocated device IDs */
 static DEFINE_IDA(platform_devid_ida);
 
-#define to_platform_driver(drv)	(container_of((drv), struct platform_driver, \
-				 driver))
-
 struct device platform_bus = {
 	.init_name	= "platform",
 };
@@ -509,13 +509,22 @@ static int platform_drv_probe(struct device *_dev)
 	struct platform_device *dev = to_platform_device(_dev);
 	int ret;
 
-	if (ACPI_HANDLE(_dev))
+	isipmi(_dev->driver);
+	dbgentry();
+
+	if (ACPI_HANDLE(_dev)) {
+		dbgmsg("ipmi has ACPI_HANDLE\n");
 		acpi_dev_pm_attach(_dev, true);
+	}
 
 	ret = drv->probe(dev);
-	if (ret && ACPI_HANDLE(_dev))
+	if (ret && ACPI_HANDLE(_dev)) {
+		dbgmsg("drv->probe(dev) failed\n");
 		acpi_dev_pm_detach(_dev, true);
+	}
 
+	dbgmsg("drv->probe(dev) succeeded\n");
+	dbgmsg("success exit\n");
 	return ret;
 }
 
@@ -553,6 +562,9 @@ static void platform_drv_shutdown(struct device *_dev)
  */
 int platform_driver_register(struct platform_driver *drv)
 {
+	isipmi(&drv->driver);
+	dbgentry();
+
 	drv->driver.bus = &platform_bus_type;
 	if (drv->probe)
 		drv->driver.probe = platform_drv_probe;
@@ -750,17 +762,27 @@ static int platform_match(struct device *dev, struct device_driver *drv)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct platform_driver *pdrv = to_platform_driver(drv);
 
+	isipmi(drv);
+	dbgentry();
+
 	/* Attempt an OF style match first */
 	if (of_driver_match_device(dev, drv))
 		return 1;
 
 	/* Then try ACPI style match */
-	if (acpi_driver_match_device(dev, drv))
+	if (acpi_driver_match_device(dev, drv)) {
+		dbgmsg("acpi_driver_match_device match\n");
 		return 1;
+	}
 
 	/* Then try to match against the id table */
-	if (pdrv->id_table)
-		return platform_match_id(pdrv->id_table, pdev) != NULL;
+	if(pdrv) {
+		if (pdrv->id_table) {
+			dbgmsg("trying to find a match in the id table\n");
+			return platform_match_id(pdrv->id_table, pdev) != NULL;
+		}
+	} else
+		dbgmsg("pdrv is NULL\n");
 
 	/* fall-back to driver name match */
 	return (strcmp(pdev->name, drv->name) == 0);
diff --git a/drivers/char/ipmi/ipmi_si_intf.c b/drivers/char/ipmi/ipmi_si_intf.c
index 7e9807d..6dabf9a 100644
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@ -151,6 +151,7 @@ enum si_stat_indexes {
 	/* Number of asynchronous messages received. */
 	SI_STAT_incoming_messages,
 
+#include <linux/prdbg.h>
 
 	/* This *must* remain last, add new values above this. */
 	SI_NUM_STATS
@@ -1980,6 +1981,8 @@ static int hardcode_find_bmc(void)
 	int             i;
 	struct smi_info *info;
 
+	prentry();
+
 	for (i = 0; i < SI_MAX_PARMS; i++) {
 		if (!ports[i] && !addrs[i])
 			continue;
@@ -1990,6 +1993,7 @@ static int hardcode_find_bmc(void)
 
 		info->addr_source = SI_HARDCODED;
 		printk(KERN_INFO PFX "probing via hardcoded address\n");
+		prdbg("probing via hardcoded address\n");
 
 		if (!si_type[i] || strcmp(si_type[i], "kcs") == 0) {
 			info->si_type = SI_KCS;
@@ -2044,6 +2048,7 @@ static int hardcode_find_bmc(void)
 			kfree(info);
 		}
 	}
+	prdbg("exit return value: %d\n", ret);
 	return ret;
 }
 
@@ -2158,6 +2163,8 @@ static int try_init_spmi(struct SPMITable *spmi)
 	struct smi_info  *info;
 	int rv;
 
+	prentry();
+
 	if (spmi->IPMIlegacy != 1) {
 		printk(KERN_INFO PFX "Bad SPMI legacy %d\n", spmi->IPMIlegacy);
 		return -ENODEV;
@@ -2247,20 +2254,29 @@ static void spmi_find_bmc(void)
 	struct SPMITable *spmi;
 	int              i;
 
-	if (acpi_disabled)
+	prentry();
+
+	if (acpi_disabled) {
+		prdbg("acpi_disabled is set, return void\n");
 		return;
+	}
 
-	if (acpi_failure)
+	if (acpi_failure) {
+		prdbg("acpi_failure is set, return void\n");
 		return;
+	}
 
 	for (i = 0; ; i++) {
 		status = acpi_get_table(ACPI_SIG_SPMI, i+1,
 					(struct acpi_table_header **)&spmi);
-		if (status != AE_OK)
+		if (status != AE_OK) {
+			prdbg("table not found - return void\n");
 			return;
+		}
 
 		try_init_spmi(spmi);
 	}
+	prdbg("return void\n");
 }
 #endif
 
@@ -2282,6 +2298,8 @@ static int decode_dmi(const struct dmi_header *dm,
 	u8		reg_spacing;
 	u8              len = dm->length;
 
+	prentry();
+
 	dmi->type = data[4];
 
 	memcpy(&base_addr, data+8, sizeof(unsigned long));
@@ -2314,6 +2332,7 @@ static int decode_dmi(const struct dmi_header *dm,
 		    break;
 		default:
 		    /* Some other interface, just ignore it. */
+		    prdbg("some other interface, return %d\n", -EIO);
 		    return -EIO;
 		}
 	} else {
@@ -2333,6 +2352,8 @@ static int decode_dmi(const struct dmi_header *dm,
 
 	dmi->slave_addr = data[6];
 
+	prdbg("return 0\n");
+
 	return 0;
 }
 
@@ -2340,6 +2361,8 @@ static void try_init_dmi(struct dmi_ipmi_data *ipmi_data)
 {
 	struct smi_info *info;
 
+	prentry();
+
 	info = smi_info_alloc();
 	if (!info) {
 		printk(KERN_ERR PFX "Could not allocate SI data\n");
@@ -2360,6 +2383,7 @@ static void try_init_dmi(struct dmi_ipmi_data *ipmi_data)
 		info->si_type = SI_BT;
 		break;
 	default:
+		prdbg("invalid si_type - return void\n");
 		kfree(info);
 		return;
 	}
@@ -2379,6 +2403,7 @@ static void try_init_dmi(struct dmi_ipmi_data *ipmi_data)
 		kfree(info);
 		printk(KERN_WARNING PFX "Unknown SMBIOS I/O Address type: %d\n",
 		       ipmi_data->addr_space);
+		prdbg("void return\n");
 		return;
 	}
 	info->io.addr_data = ipmi_data->base_addr;
@@ -2400,8 +2425,12 @@ static void try_init_dmi(struct dmi_ipmi_data *ipmi_data)
 		 info->io.addr_data, info->io.regsize, info->io.regspacing,
 		 info->irq);
 
-	if (add_smi(info))
+	if (add_smi(info)) {
+		prdbg("unable to add_smi(info)\n");
 		kfree(info);
+	}
+
+	prdbg("return void\n");
 }
 
 static void dmi_find_bmc(void)
@@ -2410,6 +2439,8 @@ static void dmi_find_bmc(void)
 	struct dmi_ipmi_data data;
 	int                  rv;
 
+	prentry();
+
 	while ((dev = dmi_find_device(DMI_DEV_TYPE_IPMI, NULL, dev))) {
 		memset(&data, 0, sizeof(data));
 		rv = decode_dmi((const struct dmi_header *) dev->device_data,
@@ -2417,6 +2448,7 @@ static void dmi_find_bmc(void)
 		if (!rv)
 			try_init_dmi(&data);
 	}
+	prdbg("return void\n");
 }
 #endif /* CONFIG_DMI */
 
@@ -2681,13 +2713,19 @@ static int acpi_ipmi_probe(struct platform_device *dev)
 	unsigned long long tmp;
 	int rv = -EINVAL;
 
+	prentry();
+
 	handle = ACPI_HANDLE(&dev->dev);
-	if (!handle)
+	if (!handle) {
+		prdbg("No ACPI_HANDLE for dev->name: %s FAIL!\n", dev->name);
 		return -ENODEV;
+	}
 
 	info = smi_info_alloc();
-	if (!info)
+	if (!info) {
+		prdbg("Unable to allocate struct smi_info FAIL!\n");
 		return -ENOMEM;
+	}
 
 	info->addr_source = SI_ACPI;
 	dev_info(&dev->dev, PFX "probing via ACPI\n");
@@ -2697,7 +2735,7 @@ static int acpi_ipmi_probe(struct platform_device *dev)
 	/* _IFT tells us the interface type: KCS, BT, etc */
 	status = acpi_evaluate_integer(handle, "_IFT", NULL, &tmp);
 	if (ACPI_FAILURE(status)) {
-		dev_err(&dev->dev, "Could not find ACPI IPMI interface type\n");
+		dev_err(&dev->dev, "Could not find ACPI IPMI interface type FAIL!\n");
 		goto err_free;
 	}
 
@@ -2774,9 +2812,11 @@ static int acpi_ipmi_probe(struct platform_device *dev)
 	if (rv)
 		kfree(info);
 
+	prdbg("Successful exit\n");
 	return rv;
 
 err_free:
+	prdbg("exit FAIL\n");
 	kfree(info);
 	return rv;
 }
@@ -2795,8 +2835,11 @@ static int acpi_ipmi_probe(struct platform_device *dev)
 
 static int ipmi_probe(struct platform_device *dev)
 {
-	if (of_ipmi_probe(dev) == 0)
+
+	if (of_ipmi_probe(dev) == 0) {
+		prdbg("of_ipmi_probe succeeded.\n");
 		return 0;
+	}
 
 	return acpi_ipmi_probe(dev);
 }
@@ -3509,6 +3552,7 @@ static int is_new_interface(struct smi_info *info)
 static int add_smi(struct smi_info *new_smi)
 {
 	int rv = 0;
+	prentry();
 
 	printk(KERN_INFO PFX "Adding %s-specified %s state machine",
 	       ipmi_addr_src_to_str(new_smi->addr_source),
@@ -3531,6 +3575,7 @@ static int add_smi(struct smi_info *new_smi)
 
 out_err:
 	mutex_unlock(&smi_infos_lock);
+	prdbg("exit return valuev: %d\n", rv);
 	return rv;
 }
 
@@ -3785,16 +3830,19 @@ static int init_ipmi_si(void)
 	shadow_handlers->set_need_watch = set_need_watch;
 
 	if (si_tryplatform) {
+		prdbg("Calling platform_driver_register");
 		rv = platform_driver_register(&ipmi_driver);
 		if (rv) {
 			printk(KERN_ERR PFX "Unable to register "
 			       "driver: %d\n", rv);
+			prdbg("exit FAIL!\n");
 			return rv;
 		}
 	}
 
 	/* Parse out the si_type string into its components. */
 	str = si_type_str;
+	prdbg("si_type_str: %s\n", si_type_str);
 	if (*str != '\0') {
 		for (i = 0; (i < SI_MAX_PARMS) && (*str != '\0'); i++) {
 			si_type[i] = str;
@@ -3807,32 +3855,42 @@ static int init_ipmi_si(void)
 			}
 		}
 	}
+	prdbg("si_type: %s\n", *si_type);
 
 	printk(KERN_INFO "IPMI System Interface driver.\n");
 
 	/* If the user gave us a device, they presumably want us to use it */
-	if (!hardcode_find_bmc())
+	if (!hardcode_find_bmc()) {
+		prdbg("found bmc, exit 0\n");
 		return 0;
+	}
 
 #ifdef CONFIG_PCI
 	if (si_trypci) {
+		prdbg("si_trypci\n");
 		rv = pci_register_driver(&ipmi_pci_driver);
 		if (rv)
 			printk(KERN_ERR PFX "Unable to register "
 			       "PCI driver: %d\n", rv);
-		else
+		else {
+			prdbg("pci_register_driver(&ipmi_pci_driver) success\n");
 			pci_registered = 1;
+		}
 	}
 #endif
 
 #ifdef CONFIG_DMI
-	if (si_trydmi)
+	if (si_trydmi) {
+		prdbg("si_trydmi\n");
 		dmi_find_bmc();
+	}
 #endif
 
 #ifdef CONFIG_ACPI
-	if (si_tryacpi)
+	if (si_tryacpi) {
+		prdbg("si_tryacpi\n");
 		spmi_find_bmc();
+	}
 #endif
 
 	/* We prefer devices with interrupts, but in the case of a machine
