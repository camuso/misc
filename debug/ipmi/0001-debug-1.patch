From 445cdfa1a62353f3dd00c826880c5265dd1d1c65 Mon Sep 17 00:00:00 2001
From: Tony Camuso <tcamuso@redhat.com>
Date: Wed, 9 May 2018 09:07:18 -0400
Subject: [PATCH 1/3] debug-1

Signed-off-by: Tony Camuso <tcamuso@redhat.com>
---
 drivers/base/platform.c          | 14 +++++++++++++-
 drivers/char/ipmi/ipmi_kcs_sm.c  | 11 ++++++++++-
 drivers/char/ipmi/ipmi_si_intf.c | 12 +++++++++++-
 include/linux/prdbg.h            | 36 ++++++++++++++++++++++++++++++++++++
 4 files changed, 70 insertions(+), 3 deletions(-)

diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index 9045c5f..45700b9 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -27,6 +27,7 @@
 #include <linux/clk/clk-conf.h>
 #include <linux/limits.h>
 #include <linux/property.h>
+#include <linux/prdbg.h>
 
 #include "base.h"
 #include "power/power.h"
@@ -967,9 +968,20 @@ static int platform_match(struct device *dev, struct device_driver *drv)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct platform_driver *pdrv = to_platform_driver(drv);
 
+	if (!(strcmp(drv->name, "ipmi_si"))) {
+		prentry();
+	}
+
 	/* When driver_override is set, only bind to the matching driver */
-	if (pdev->driver_override)
+	if (pdev->driver_override) {
+		if (!(strcmp(drv->name, "ipmi_si"))) {
+			prdbg("pdev->driver_override: %s\n", pdev->driver_override);
+			prdbg("            drv->name: %s\n", drv->name);
+			prdbg(" ! strcmp of these two will return: %d\n",
+				!strcmp(pdev->driver_override, drv->name));
+		}
 		return !strcmp(pdev->driver_override, drv->name);
+	}
 
 	/* Attempt an OF style match first */
 	if (of_driver_match_device(dev, drv))
diff --git a/drivers/char/ipmi/ipmi_kcs_sm.c b/drivers/char/ipmi/ipmi_kcs_sm.c
index 1da61af..adb1674 100644
--- a/drivers/char/ipmi/ipmi_kcs_sm.c
+++ b/drivers/char/ipmi/ipmi_kcs_sm.c
@@ -43,6 +43,7 @@
 #include <linux/string.h>
 #include <linux/jiffies.h>
 #include <linux/ipmi_msgdefs.h>		/* for completion codes */
+#include <linux/prdbg.h>
 #include "ipmi_si_sm.h"
 
 /* kcs_debug is a bit-field
@@ -160,6 +161,8 @@ static unsigned int init_kcs_data(struct si_sm_data *kcs,
 
 static inline unsigned char read_status(struct si_sm_data *kcs)
 {
+	prentry();
+	prdbg("kcs->io->inputb: %pF\n", kcs->io->inputb);
 	return kcs->io->inputb(kcs->io, 1);
 }
 
@@ -524,15 +527,21 @@ static int kcs_size(void)
 
 static int kcs_detect(struct si_sm_data *kcs)
 {
+	int stat;
+	prentry();
 	/*
 	 * It's impossible for the KCS status register to be all 1's,
 	 * (assuming a properly functioning, self-initialized BMC)
 	 * but that's what you get from reading a bogus address, so we
 	 * test that first.
 	 */
-	if (read_status(kcs) == 0xff)
+	stat = read_status(kcs);
+	if (stat == 0xff) {
+		prdbg("read_status returned 0xff\n");
 		return 1;
+	}
 
+	prdbg("read_status returned: %d\n", stat);
 	return 0;
 }
 
diff --git a/drivers/char/ipmi/ipmi_si_intf.c b/drivers/char/ipmi/ipmi_si_intf.c
index 36f47e8..ca07cf0 100644
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@ -60,6 +60,7 @@
 #include <linux/ipmi.h>
 #include <linux/ipmi_smi.h>
 #include <asm/io.h>
+#include <linux/prdbg.h>
 #include "ipmi_si_sm.h"
 #include "ipmi_dmi.h"
 #include <linux/dmi.h>
@@ -3486,6 +3487,8 @@ static int try_smi_init(struct smi_info *new_smi)
 	int i;
 	char *init_name = NULL;
 
+	prentry();
+
 	pr_info(PFX "Trying %s-specified %s state machine at %s address 0x%lx, slave address 0x%x, irq %d\n",
 		ipmi_addr_src_to_str(new_smi->addr_source),
 		si_to_str[new_smi->si_type],
@@ -3495,19 +3498,23 @@ static int try_smi_init(struct smi_info *new_smi)
 
 	switch (new_smi->si_type) {
 	case SI_KCS:
+		prdbg("new_smi->si_type: SI_KCS\n");
 		new_smi->handlers = &kcs_smi_handlers;
 		break;
 
 	case SI_SMIC:
+		prdbg("new_smi->si_type: SI_SMIC\n");
 		new_smi->handlers = &smic_smi_handlers;
 		break;
 
 	case SI_BT:
+		prdbg("new_smi->si_type: SI_BT\n");
 		new_smi->handlers = &bt_smi_handlers;
 		break;
 
 	default:
 		/* No support for anything else yet. */
+		prdbg("Could not parse new_smi->si_type: %d !\n", new_smi->si_type);
 		rv = -EIO;
 		goto out_err;
 	}
@@ -3554,8 +3561,11 @@ static int try_smi_init(struct smi_info *new_smi)
 
 	/* Do low-level detection first. */
 	if (new_smi->handlers->detect(new_smi->si_sm)) {
-		if (new_smi->addr_source)
+		prdbg("new_smi->handlers->detect returned nonzero status\n");
+		if (new_smi->addr_source) {
+			prdbg("But new_smi->addr_source contains: %d\n", new_smi->addr_source);
 			dev_err(new_smi->dev, "Interface detection failed\n");
+		}
 		rv = -ENODEV;
 		goto out_err;
 	}
diff --git a/include/linux/prdbg.h b/include/linux/prdbg.h
new file mode 100644
index 0000000..212057e
--- /dev/null
+++ b/include/linux/prdbg.h
@@ -0,0 +1,36 @@
+
+#ifndef PRDBG_H
+#define PRDBG_H
+
+#define __PRDBG
+
+#ifdef __PRDBG
+
+#define DBGPFX "* "__FILE__"::"
+
+#define prdbg(fmt, ...) \
+do { \
+       printk(KERN_INFO "** %s():%d " fmt, __func__, __LINE__, ##__VA_ARGS__); \
+} while (0)
+
+#define prcaller() \
+do { \
+       printk(KERN_INFO DBGPFX "Caller: %pS\n", __builtin_return_address(0)); \
+} while (0)
+
+#define prentry() \
+do { \
+	printk(KERN_INFO "\n"); \
+	printk(KERN_INFO DBGPFX "%s():%d Caller %pS\n", \
+			__func__, __LINE__, __builtin_return_address(0)); \
+} while (0)
+
+#else	// ifndef __PRDBG
+
+#define prdbg(fmt, ...)
+#define prcaller()
+#define prentry()
+
+#endif	// ifdef __PRDBG
+
+#endif	// ifdef PRDBG_H
-- 
1.8.3.1

